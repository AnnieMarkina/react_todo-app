{"version":3,"sources":["Components/Todos/TodosContainer/TodoItem/TodoItem.js","Components/Todos/TodosContainer/TodosList/TodosList.js","Components/Todos/TodosContainer/ToggleInput/ToggleInput.js","Components/Todos/TodosContainer/TodosContainer.js","Components/Todos/Footer/Footer.js","Components/Todos/TodoInput/TodoInput.js","Components/Todos/Todos.js","App.js","index.js"],"names":["TodoItem","todo","deleteTodo","isCompleted","completedClassToggle","classNames","completed","className","type","id","onClick","checked","onChange","e","htmlFor","text","TodosList","props","todos","map","key","ToggleInput","toggleAllCompleted","isAllCompleted","every","length","TodosContainer","Footer","showTodos","showTodoStatus","deleteAllCompleted","completedTodos","some","todoCount","filter","allSelector","selected","activeSelector","completedSelector","href","TodoInput","state","input","handleAddInputValue","event","preventDefault","addTodo","setState","handleInputChange","value","target","replace","this","onSubmit","placeholder","React","Component","Todos","allCompleted","handleAddTodo","prevState","push","handleToggleCompletion","index","indexOf","handleDeleteBtn","handleAllCompleted","activeTodos","makeAllActive","makeAllCompleted","handleDeleteAllCompleted","handleShowTodosFiltering","status","visibleTodos","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57d7b8c9.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst TodoItem = ({ todo, deleteTodo, isCompleted }) => {\n  const completedClassToggle = classNames({ completed: todo.completed });\n\n  return (\n    <li className={completedClassToggle}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={todo.id}\n          onClick={() => isCompleted(todo.id)}\n          checked={todo.completed}\n          onChange={(e) => {}}\n        />\n        <label htmlFor={todo.id}>{todo.text}</label>\n        <button\n          onClick={() => deleteTodo(todo.id)}\n          type=\"button\"\n          className=\"destroy\"\n        />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    text: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  isCompleted: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from '../TodoItem/TodoItem';\n\nconst TodosList = (props) => {\n  const { todos, deleteTodo, isCompleted } = props;\n\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          isCompleted={() => isCompleted(todo.id)}\n          deleteTodo={() => deleteTodo(todo.id)}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodosList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      text: PropTypes.string,\n      completed: PropTypes.bool,\n    }),\n  ).isRequired,\n  isCompleted: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default TodosList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ToggleInput = ({ todos, toggleAllCompleted }) => {\n  const isAllCompleted = todos.every(todo => todo.completed === true);\n\n  return (\n    <div>\n      <input\n        onClick={toggleAllCompleted}\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        checked={isAllCompleted && todos.length > 0}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n    </div>\n  );\n};\n\nToggleInput.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      text: PropTypes.string,\n      completed: PropTypes.bool,\n    }),\n  ).isRequired,\n  toggleAllCompleted: PropTypes.func.isRequired,\n};\n\nexport default ToggleInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoList from './TodosList/TodosList';\nimport ToggleInput from './ToggleInput/ToggleInput';\n\nconst TodosContainer = (props) => {\n  const {\n    todos,\n    toggleAllCompleted,\n    isCompleted,\n    deleteTodo,\n  } = props;\n\n  return (\n    <section className=\"main\">\n      {todos.length > 0 && (\n        <ToggleInput\n          todos={todos}\n          toggleAllCompleted={toggleAllCompleted}\n        />\n      )}\n\n      <TodoList\n        todos={todos}\n        isCompleted={isCompleted}\n        deleteTodo={deleteTodo}\n      />\n    </section>\n  );\n};\n\nTodosContainer.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      text: PropTypes.string,\n      completed: PropTypes.bool,\n    }),\n  ).isRequired,\n  toggleAllCompleted: PropTypes.func.isRequired,\n  isCompleted: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default TodosContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst Footer = (props) => {\n  const {\n    todos,\n    showTodos,\n    showTodoStatus,\n    deleteAllCompleted,\n  } = props;\n\n  const completedTodos = todos.some(todo => todo.completed === true);\n  const todoCount = todos.filter(todo => !todo.completed).length;\n\n  const allSelector = classNames({ selected: (showTodos === 'all') });\n  const activeSelector = classNames({ selected: (showTodos === 'active') });\n  const completedSelector = classNames({ selected: (\n    (showTodos === 'completed')\n  ) });\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {todoCount}\n        {' '}\n        items left\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            onClick={() => showTodoStatus('all')}\n            href=\"#/\"\n            className={allSelector}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            onClick={() => showTodoStatus('active')}\n            href=\"#/active\"\n            className={activeSelector}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            onClick={() => showTodoStatus('completed')}\n            href=\"#/completed\"\n            className={completedSelector}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      {completedTodos && (\n        <button\n          onClick={deleteAllCompleted}\n          type=\"button\"\n          className=\"clear-completed\"\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      text: PropTypes.string,\n      completed: PropTypes.bool,\n    }),\n  ).isRequired,\n  showTodos: PropTypes.string.isRequired,\n  deleteAllCompleted: PropTypes.func.isRequired,\n  showTodoStatus: PropTypes.func.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoInput extends React.Component {\n  state = {\n    input: '',\n  };\n\n  handleAddInputValue = (event) => {\n    event.preventDefault();\n    const { input } = this.state;\n\n    if (input) {\n      this.props.addTodo(input);\n      this.setState({ input: '' });\n    }\n  }\n\n  handleInputChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      input: value.replace(/^\\s+/g, ''),\n    });\n  }\n\n  render() {\n    const { input } = this.state;\n\n    return (\n      <>\n        <form onSubmit={this.handleAddInputValue}>\n          <input\n            onChange={this.handleInputChange}\n            value={input}\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n          />\n        </form>\n      </>\n    );\n  }\n}\n\nTodoInput.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoInput;\n","import React from 'react';\nimport TodosContainer from './TodosContainer/TodosContainer';\nimport Footer from './Footer/Footer';\nimport TodoInput from './TodoInput/TodoInput';\n\nclass Todos extends React.Component {\n  state = {\n    todos: [],\n    allCompleted: false,\n    showTodos: 'all',\n  };\n\n  handleAddTodo = (todo) => {\n    this.setState((prevState) => {\n      const { todos } = this.state;\n\n      todos.push({\n        id: todos.length === 0 ? `todo-${0}` : `todo-${todos.length}`,\n        text: todo,\n        completed: false,\n      });\n\n      return todos;\n    });\n  }\n\n  handleToggleCompletion = (id) => {\n    const { todos } = this.state;\n    const index = todos.map(todo => todo.id).indexOf(id);\n\n    this.setState((prevState) => {\n      todos[index].completed = !todos[index].completed;\n\n      return todos;\n    });\n  }\n\n  handleDeleteBtn = (id) => {\n    const { todos } = this.state;\n\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id),\n    });\n  }\n\n  handleAllCompleted = () => {\n    const { todos, allCompleted } = this.state;\n\n    const makeAllCompleted = () => {\n      const completedTodos = todos.map((todo) => {\n        if (todo.completed === false) {\n          return {\n            ...todo,\n            completed: true,\n          };\n        }\n\n        return todo;\n      });\n\n      this.setState({\n        todos: [...completedTodos],\n        allCompleted: true,\n      });\n    };\n\n    const makeAllActive = () => {\n      const activeTodos = todos.map((todo) => {\n        if (todo.completed === true) {\n          return {\n            ...todo,\n            completed: false,\n          };\n        }\n\n        return todo;\n      });\n\n      this.setState({\n        todos: [...activeTodos],\n        allCompleted: false,\n      });\n    };\n\n    !allCompleted ? makeAllCompleted() : makeAllActive();\n  }\n\n  handleDeleteAllCompleted = () => {\n    const { todos } = this.state;\n\n    this.setState({\n      todos: todos.filter(todo => todo.completed === false),\n    });\n  }\n\n  handleShowTodosFiltering = (status) => {\n    if (status === 'all') {\n      this.setState({\n        showTodos: 'all',\n      });\n    } else if (status === 'active') {\n      this.setState({\n        showTodos: 'active',\n      });\n    } else if (status === 'completed') {\n      this.setState({\n        showTodos: 'completed',\n      });\n    }\n  }\n\n  render() {\n    const {\n      todos,\n      showTodos,\n    } = this.state;\n\n    let visibleTodos;\n\n    if (showTodos === 'all') {\n      visibleTodos = [...todos];\n    } else if (showTodos === 'active') {\n      visibleTodos = todos.filter(todo => todo.completed === false);\n    } else if (showTodos === 'completed') {\n      visibleTodos = todos.filter(todo => todo.completed === true);\n    }\n\n    return (\n      <>\n        <section className=\"todoapp\">\n          <header className=\"header\">\n            <h1>todos</h1>\n            <TodoInput addTodo={this.handleAddTodo} />\n          </header>\n\n          <TodosContainer\n            toggleAllCompleted={() => this.handleAllCompleted()}\n            todos={visibleTodos}\n            isCompleted={this.handleToggleCompletion}\n            deleteTodo={this.handleDeleteBtn}\n          />\n\n          {todos.length > 0 && (\n            <Footer\n              todos={todos}\n              showTodos={showTodos}\n              showTodoStatus={this.handleShowTodosFiltering}\n              deleteAllCompleted={this.handleDeleteAllCompleted}\n            />\n          )}\n\n        </section>\n      </>\n    );\n  }\n}\n\nexport default Todos;\n","import React from 'react';\nimport Todos from './Components/Todos/Todos';\n\nconst App = () => (\n  <section className=\"todoapp\">\n    <Todos />\n  </section>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}